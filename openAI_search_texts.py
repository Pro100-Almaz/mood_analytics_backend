from openai import OpenAI
import os
from dotenv import load_dotenv

load_dotenv()


client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
import json

opinion_prompt = """
Проанализируй общественное мнение по заданной теме. Смотри именно на параметры URL, short_description, citations, research.
- Определи соотношение положительных, отрицательных и нейтральных отзывов.
- Тема анализа – это исходный вопрос, который я тебе передам.
- Значения не могут быть нулевыми, ты должен максимум из классифицировать.
- В поле comment напиши сам текст и ссылку, в поле opinion напиши отношение этого коммента, либо положительный, отрицательный или неитральный.
- Верни результат строго в виде JSON без лишних комментариев, по формату:
{
  "overall": {
    "positive": <количество положительных отзывов>,
    "negative": <количество отрицательных отзывов>,
    "neutral": <количество нейтральных отзывов>,
    "main_opinion": <доминирующее мнение, в краце опиши картину>
  },
  "comments": [{comment: "", opinion: ""}]
}
"""

prompt = """
You are research helper for институт парламентаризма Казахстана. I give you prompt to research on and you choose ONLY RELEVANT tools and its parameters to be used by further agents. Return as JSON. if you decide to not to use any given type for a tool, still just pass a type with an empty null params array. Все ключевые запросы только на русском|предположим: Egov Budgets тебе не нужен, ты все равно пришлешь type: Budgets, keywords: []

Tools set for AI RESEARSH:
1. Tool: Egov Государственный портал Республики Казахстан, который хранит и предоставляет доступ к различным типам данных и услуг, связанных с государственным управлением и взаимодействием граждан с государственными органами
   For tool 1 - Egov in parameters Provide an array of type + keywords objects.
   Основные Типы EGOV (включи их все в ответ, просто не обязательно ключевики если не нужно):
   - Открытый диалог (Type: Dialog)
     Площадка для прямого общения граждан с государственными органами. Информация представлена в виде запросов от граждан на любую тему и ответа от представителя государственного органа.
     Нужно минимум 7 ключевиков и разных, как будто ты думаешь как гражданин у которого есть инициатива или вопрос или потребность.
     Ключевые слова должны быть как минимум 3 видов: 3 штуки: 1 слово. 3 штуки: 2 слова. 3 штуки: 3-4 слова.
   - Открытые данные (Type: Opendata)
     Портал, предоставляющий доступ к наборам данных, создаваемым государственными органами.
     Содержит статистические данные, реестры и справочники, географическая информация, экономические показатели и другие открытые данные.
     Старайся его включать.
   - Открытые бюджеты (Type: Budgets)
     Публикация проектов бюджетных программ РК и мониторинг их исполнения.
     Можно получить информацию по проектам и утвержденным бюджетным программам, также для завершенных программ доступны отчеты.
   - Нормативно-правовые акты РК (Type: NLA)
     Публикация проектов НПА для публичного обсуждения.
     Можно найти информацию по НПА в разных статусах, а также концепции законопроектов.
     Используй специфические для КЗ термины, ключ запросы.
     Запросы должны быть только ключевыми, исключи лишние слова и общие формулировки (закон, постановление, помощь и т.д.) Максимум 1-2 слова на запрос! Обязательно возвращай минимум 7 запросов.

tool: 2. Adilet
Информационно-правовая система «Әділет» — это официальный онлайн-ресурс, предоставляющий доступ к нормативным правовым актам Республики Казахстан.
Содержит два раздела:
   - База НПА (type: NLA)
     Содержит Конституцию, кодексы, законы, указы Президента, постановления Правительства и другие нормативные документы, регулирующие различные сферы общественной жизни.
     Тут тебе нужно быть супер точным, включать именно ключевики которые РЕАЛЬНО могут содержать целевую информацию.
     Не создавай новые слова типа "ОтветственностьЖивотноводов". Обязательно возвращай минимум 7 запросов.
   - База исследований (Type: Research)
     Специализированный раздел информационно-правовой системы «Әділет», предоставляющий доступ к различным исследованиям и аналитическим материалам.
     Этот ресурс разработан для обеспечения пользователей актуальной и достоверной информацией в области права и законодательства Республики Казахстан.
     Раздел аккумулирует научные работы, аналитические обзоры и другие материалы, связанные с правовой тематикой.
Отвечай всегда и все на русском! Пожалуйста.

tool 3: Web (its a Perplexity search)
Параметры: array of search_queries, regarding specific report dimensions.
Хотя бы один запрос должен включать поиск научных статей и работ.
Один из запросов должен включать анализ международного опыта.
Запросы должны раскрывать разные стороны исследуемого вопроса.
Запросы ОБЯЗАТЕЛЬНО должны включать контекст (Казахстан), кроме вопросов касающихся анализа международного опыта.
Используй разные формулировки, чтобы собрать максимум информации.
Исключи вопросы, касающиеся НПА и законодательства.

tool 4: FB.
Параметры: array of 1 keyword sentence.
В постах нет академических формулировок.
Если тема на твой взгляд узкая, лучше подбери более горячие ключевики.
Обязательно нужно постараться раскрыть тему со всех сторон в разрезе соц. сетей.
Выдавай, думая как пользователь: как обычный гражданин бы сформулировал проблему и какие слова бы использовал.
Можно сленг.
Состав один полнеценный текст для пойска постов через поисковик Google, состав не длинный но конструктивный текст который 
можно вставить.
Без заморочек, это же ФБ!

tool 5: Instagram
Параметры: array of 1 keyword sentence.
Анализ постов, комментариев и хештегов в Instagram, связанных с темой исследования.
В постах могут присутствовать как текстовые, так и визуальные элементы, но акцентируй внимание на текстовой составляющей.
Если тема кажется узкой, подбери более популярные и обсуждаемые ключевики.
Думай как обычный пользователь: формулируй проблему так, как это сделал бы гражданин, сленговые выражения и краткие фразы.
Состав один полнеценный текст для пойска постов через поисковик Google, состав не длинный но конструктивный текст который 
можно вставить.
Без излишних сложностей, это же Instagram!

Structure: array of objects: each object should have a tool name and an array of params (keywords / type) etc.

ЗАДАНИЕ ПРИМЕР (ЧТОБЫ ТЫ ПОНЯЛ ЛОГИКУ):
ЗАПРОС ИССЛЕДОВАНИЯ: основные проблемы в области ответственного обращения с животными
(пример ключевых слов: вакцинация, стерилизация, отлов, оказание ветеринарной помощи животным, в т.ч. при увечье, учет животных, условия содержания животных в пунктах отлова, приемниках, питомниках, проведение эвтаназии, определение состояния здоровья животного, проведение на животных ветеринарных процедур и т.д.)

Результаты, которые нужно найти с помощью твоего JSON:
1. НПА, регулирующие обращения с животными (перечень)
2. Научные исследования (статьи, монографий, комментарий и т.д.) по обращения с животными
3. Жалобы и заявления граждан, по вопросам обращения с животными
4. Статистические данные по вопросам обращения с животными в Казахстане за последние 5 лет
5. Информация от государственных органов по вопросам обращения с животными, а также от НПО, движений, волонтеров, коалиций по оказанию помощи пострадавшим
6. Обзор новостей по вопросам обращения с животными
7. Обзор комментариев и постов по теме
8. Международный опыт

По вышеуказанным направлениям на первом этапе необходимо сбор материалов из различных источников (материалы или ссылки на них).

json obj array name must be research
"""

def get_search_queries(search_queries):
    additional_text = f"\nSearch Queries: {search_queries}\n"
    complete_prompt = prompt + additional_text
    # Make the API call to GPT-4
    try:
        response = client.chat.completions.create(model="gpt-4",
        messages=[
            {"role": "system", "content": "Ты помощник для проведения исследования."},
            {"role": "user", "content": complete_prompt}
        ],
        temperature=0.7,
        max_tokens=1500)
    except Exception as e:
        raise ConnectionError("Network error. Exception: ", str(e))

    response_content = response.choices[0].message.content
    print(response_content)

    try:
        result_json = json.loads(response_content)
    except json.JSONDecodeError as e:
        result_json = None

    return result_json


def process_search_queries(user_message):
    try:
        response = client.chat.completions.create(model="gpt-4",
            messages=[
                {"role": "system", "content": "Ты помощник для проведения исследования."},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=1500
        )

        assistant_reply = response.choices[0].message.content
        return {'status': 'success', 'assistant_reply': json.loads(assistant_reply)}
    except Exception as e:
        return {'status': 'error', 'error': str(e)}


def get_digest_data(opinion_list):
    try:
        response = client.chat.completions.create(model="gpt-4",
            messages=[
                {"role": "system", "content": "Ты помощник для проведения исследования."},
                {"role": "user", "content": opinion_list}
            ],
            temperature=0.7,
            max_tokens=1500
        )

        assistant_reply = response.choices[0].message.content
        return assistant_reply
    except Exception as e:
        return None


def analyze_opinion(question, assistant_replies):
    # responses_text = ""
    # for item in assistant_replies:
    #     if item == 'web' or item == 'fb':
    #         for key, value in item.items():
    #             responses_text += f"{key}: {value}\n\n"
    #     else:
    #         for result in item:
    #             for key, value in result.items():
    #                 responses_text += f"{key}: {value}\n\n"

    prompt = (
        f"Тема: {question}\n\n"
        f"Ответы {assistant_replies}\n\n"
    )

    try:
        response = client.chat.completions.create(model="gpt-4",
              messages=[
                  {"role": "system",
                   "content": "Ты помощник для проведения исследования общественного мнения."},
                  {"role": "user", "content": opinion_prompt + prompt}
              ],
              temperature=0.7,
              max_tokens=1500
        )
        assistant_reply = response.choices[0].message.content
        return assistant_reply
    except Exception as e:
        return None
